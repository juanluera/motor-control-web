(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function s(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerPolicy&&(i.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?i.credentials="include":e.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(e){if(e.ep)return;e.ep=!0;const i=s(e);fetch(e.href,i)}})();class c{constructor(){this.client=null,this.isConnected=!1,this.motorState={isOn:!1,speed:0,direction:"forward"},this.topics={motor:"akuri/motor/control",status:"akuri/motor/status",log:"akuri/motor/log"},this.elements={}}initialize(){console.log("Initializing Motor Controller"),this.getDOMElements(),this.setupEventListeners(),this.updateUI(),this.addLogEntry("Motor Control Panel initialized"),console.log("Motor Controller initialized successfully")}getDOMElements(){this.elements={connectionStatus:document.getElementById("connectionStatus"),statusIndicator:document.getElementById("statusIndicator"),statusText:document.getElementById("statusText"),connectButton:document.getElementById("connectButton"),brokerUrl:document.getElementById("brokerUrl"),clientId:document.getElementById("clientId"),speedSlider:document.getElementById("speedSlider"),speedValue:document.getElementById("speedValue"),powerButton:document.getElementById("powerButton"),powerStatus:document.getElementById("powerStatus"),directionButton:document.getElementById("directionButton"),directionStatus:document.getElementById("directionStatus"),statusLog:document.getElementById("statusLog"),clearLogButton:document.getElementById("clearLogButton")}}setupEventListeners(){console.log("Setting up event listeners"),console.log("Connect button element:",this.elements.connectButton),this.elements.connectButton.addEventListener("click",()=>{console.log("Connect button clicked, isConnected:",this.isConnected),this.isConnected?this.disconnect():this.connect()}),this.elements.speedSlider.addEventListener("input",t=>{this.setSpeed(parseInt(t.target.value))}),this.elements.powerButton.addEventListener("click",()=>{this.toggleMotor()}),this.elements.directionButton.addEventListener("click",()=>{this.toggleDirection()}),this.elements.clearLogButton.addEventListener("click",()=>{this.clearLog()}),this.elements.brokerUrl.addEventListener("keypress",t=>{t.key==="Enter"&&this.connect()}),this.elements.clientId.addEventListener("keypress",t=>{t.key==="Enter"&&this.connect()})}async connect(){console.log("Connect button clicked");const t=this.elements.brokerUrl.value.trim(),s=this.elements.clientId.value.trim();if(console.log("Broker URL:",t),console.log("Client ID:",s),!t){this.addLogEntry("Error: Please enter a broker URL");return}if(!s){this.addLogEntry("Error: Please enter a client ID");return}try{if(typeof Paho>"u")throw new Error("Paho MQTT library not loaded");this.addLogEntry(`Connecting to MQTT broker: ${t}`),this.updateConnectionStatus("connecting");let n,e,i;if(t.startsWith("ws://")){const o=new URL(t);n=o.hostname,e=parseInt(o.port)||8e3,i=!1}else if(t.startsWith("wss://")){const o=new URL(t);n=o.hostname,e=parseInt(o.port)||8884,i=!0}else if(t.startsWith("mqtt://")){const o=new URL(t);n=o.hostname,e=parseInt(o.port)||1883,i=!1}else throw new Error("Unsupported protocol. Use ws://, wss://, or mqtt://");this.client=new Paho.Client(n,e,s),this.client.onConnectionLost=o=>{this.isConnected=!1,this.updateConnectionStatus("disconnected"),this.addLogEntry(`Connection lost: ${o.errorMessage}`)},this.client.onMessageArrived=o=>{this.handleIncomingMessage(o.destinationName,o.payloadString)},this.client.connect({onSuccess:()=>{this.isConnected=!0,this.updateConnectionStatus("connected"),this.addLogEntry("Successfully connected to MQTT broker"),this.subscribeToTopics(),this.publishMotorState()},onFailure:o=>{this.addLogEntry(`Connection failed: ${o.errorMessage}`),this.updateConnectionStatus("error")},useSSL:i,timeout:10,keepAliveInterval:60,cleanSession:!0})}catch(n){this.addLogEntry(`Connection failed: ${n.message}`),this.updateConnectionStatus("error")}}disconnect(){this.client&&this.isConnected&&(this.client.disconnect(),this.client=null),this.isConnected=!1,this.updateConnectionStatus("disconnected"),this.addLogEntry("Disconnected from MQTT broker")}subscribeToTopics(){!this.client||!this.isConnected||Object.values(this.topics).forEach(t=>{this.client.subscribe(t,{onSuccess:()=>{this.addLogEntry(`Subscribed to topic: ${t}`)},onFailure:s=>{this.addLogEntry(`Failed to subscribe to ${t}: ${s.errorMessage}`)}})})}handleIncomingMessage(t,s){try{const n=JSON.parse(s);switch(t){case this.topics.status:this.addLogEntry(`Status update: ${n.message}`);break;case this.topics.log:this.addLogEntry(`Motor log: ${n.message}`);break;default:this.addLogEntry(`Received on ${t}: ${s}`)}}catch{this.addLogEntry(`Received on ${t}: ${s}`)}}setSpeed(t){this.motorState.speed=Math.max(0,Math.min(100,t)),this.updateUI(),this.isConnected&&this.publishMotorState(),this.addLogEntry(`Speed set to ${this.motorState.speed}%`)}toggleMotor(){this.motorState.isOn=!this.motorState.isOn,this.updateUI(),this.isConnected&&this.publishMotorState();const t=this.motorState.isOn?"ON":"OFF";this.addLogEntry(`Motor turned ${t}`)}toggleDirection(){this.motorState.direction=this.motorState.direction==="forward"?"reverse":"forward",this.updateUI(),this.isConnected&&this.publishMotorState();const t=this.motorState.direction.toUpperCase();this.addLogEntry(`Direction changed to ${t}`)}publishMotorState(){if(!this.client||!this.isConnected)return;const t=JSON.stringify({isOn:this.motorState.isOn,speed:this.motorState.speed,direction:this.motorState.direction,timestamp:new Date().toISOString()});this.client.publish(this.topics.motor,t,0,!1)}updateUI(){this.elements.speedValue.textContent=this.motorState.speed,this.elements.speedSlider.value=this.motorState.speed,this.motorState.isOn?(this.elements.powerButton.classList.remove("off"),this.elements.powerButton.classList.add("on"),this.elements.powerButton.querySelector(".button-text").textContent="Turn Off",this.elements.powerStatus.textContent="Motor: ON"):(this.elements.powerButton.classList.remove("on"),this.elements.powerButton.classList.add("off"),this.elements.powerButton.querySelector(".button-text").textContent="Turn On",this.elements.powerStatus.textContent="Motor: OFF"),this.motorState.direction==="forward"?(this.elements.directionButton.classList.remove("reverse"),this.elements.directionButton.classList.add("forward"),this.elements.directionButton.querySelector(".button-text").textContent="Forward",this.elements.directionButton.querySelector(".button-icon").textContent="▶️",this.elements.directionStatus.textContent="Direction: FORWARD"):(this.elements.directionButton.classList.remove("forward"),this.elements.directionButton.classList.add("reverse"),this.elements.directionButton.querySelector(".button-text").textContent="Reverse",this.elements.directionButton.querySelector(".button-icon").textContent="◀️",this.elements.directionStatus.textContent="Direction: REVERSE"),this.isConnected?(this.elements.connectButton.textContent="Disconnect",this.elements.connectButton.style.background="linear-gradient(135deg, #e74c3c, #c0392b)"):(this.elements.connectButton.textContent="Connect to MQTT",this.elements.connectButton.style.background="linear-gradient(135deg, #3498db, #2980b9)")}updateConnectionStatus(t){const s=this.elements.statusIndicator,n=this.elements.statusText;switch(t){case"connected":s.classList.add("connected"),n.textContent="Connected";break;case"connecting":s.classList.remove("connected"),n.textContent="Connecting...";break;case"error":s.classList.remove("connected"),n.textContent="Connection Error";break;default:s.classList.remove("connected"),n.textContent="Disconnected"}}addLogEntry(t){const s=new Date().toLocaleTimeString(),n=document.createElement("div");n.className="log-entry",n.textContent=`[${s}] ${t}`,this.elements.statusLog.appendChild(n),this.elements.statusLog.scrollTop=this.elements.statusLog.scrollHeight;const e=this.elements.statusLog.querySelectorAll(".log-entry");e.length>50&&e[0].remove()}clearLog(){this.elements.statusLog.innerHTML='<div class="log-entry">Log cleared</div>'}}document.addEventListener("DOMContentLoaded",()=>{setTimeout(()=>{new c().initialize()},100)});
